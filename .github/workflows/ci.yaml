name: ci

on:
  pull_request:
  push:
    branches:
      - main

permissions: {}

jobs:
  flux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
      - uses: astral-sh/setup-uv@6b9c6063abd6010835644d4c2e1bef4cf5cd0fca # v6.0.1
      - run: uv run ansible-galaxy collection install ${{ github.workspace }}
      - run: |
          uv run ansible-playbook \
            --connection=local \
            --extra-vars target=localhost \
              atmosphere.common.flux
      - run: |
          kubectl wait \
            --namespace flux-system \
            --for=condition=available \
            --timeout=5m \
            deployment/helm-controller \
            deployment/kustomize-controller \
            deployment/notification-controller \
            deployment/source-controller

  cert-manager:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
      - uses: astral-sh/setup-uv@6b9c6063abd6010835644d4c2e1bef4cf5cd0fca # v6.0.1
      - run: uv run ansible-galaxy collection install ${{ github.workspace }}
      - run: |
          uv run ansible-playbook \
            --connection=local \
            --extra-vars target=localhost \
              atmosphere.common.flux \
              atmosphere.common.cert_manager
      - run: |
          kubectl wait \
            --namespace cert-manager \
            --for=condition=ready \
            --timeout=5m \
            helmrelease/cert-manager
      - run: |
          kubectl wait \
            --namespace cert-manager \
            --for=condition=available \
            --timeout=5m \
            deployment.apps/cert-manager \
            deployment.apps/cert-manager-cainjector \
            deployment.apps/cert-manager-webhook

  metal3:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
      - uses: astral-sh/setup-uv@6b9c6063abd6010835644d4c2e1bef4cf5cd0fca # v6.0.1
      - run: uv run ansible-galaxy collection install ${{ github.workspace }}
      - run: |
          uv run ansible-playbook \
            --connection=local \
            --extra-vars target=localhost \
            --extra-vars ironic_standalone_ip_address=172.18.0.2 \
            --extra-vars ironic_standalone_dhcp_cidr=172.18.0.0/24 \
            --extra-vars ironic_standalone_dhcp_range_start=172.18.0.10 \
            --extra-vars ironic_standalone_dhcp_range_end=172.18.0.20 \
              atmosphere.common.flux \
              atmosphere.common.cert_manager \
              atmosphere.common.metal3
      - run: |
          kubectl wait \
            --namespace baremetal-operator-system \
            --for=condition=ready \
            --timeout=5m \
            kustomizations/baremetal-operator
      - run: |
          kubectl wait \
            --namespace ironic-standalone-operator-system \
            --for=condition=ready \
            --timeout=5m \
            kustomizations/ironic-standalone-operator
      - run: |
          kubectl wait \
            --namespace baremetal-operator-system \
            --for=condition=available \
            --timeout=5m \
            deployment.apps/baremetal-operator-controller-manager \
            deployment.apps/ironic-service
      - run: |
          kubectl wait \
            --namespace ironic-standalone-operator-system \
            --for=condition=available \
            --timeout=5m \
            deployment.apps/ironic-standalone-operator-controller-manager

  dellhw_exporter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
      - uses: astral-sh/setup-uv@6b9c6063abd6010835644d4c2e1bef4cf5cd0fca # v6.0.1
      - run: uv run ansible-galaxy collection install ${{ github.workspace }}
      - run: |
          uv run ansible-playbook \
            --connection=local \
            --extra-vars target=localhost \
              atmosphere.common.flux \
              atmosphere.common.dellhw_exporter
      - run: |
          kubectl wait \
            --namespace monitoring \
            --for=condition=ready \
            --timeout=5m \
            helmrelease/prometheus-dellhw-exporter
      - run: |
          kubectl wait \
            --namespace monitoring \
            --for=condition=ready \
            --timeout=5m \
            pod -l app.kubernetes.io/name=prometheus-dellhw-exporter

  metrics-server:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
      - uses: astral-sh/setup-uv@d4b2f3b6ecc6e67c4457f6d3e41ec42d3d0fcb86 # v5.4.2
      - run: uv run ansible-galaxy collection install ${{ github.workspace }}
      - name: Create metrics-values.yml
        run: |
          cat <<EOF > metrics-values.yml
          metrics_server_helm_release_namespace: kube-system
          metrics_server_helm_values:
            args:
              - --kubelet-insecure-tls
          EOF

      - name: Apply metrics-server HelmRelease
        run: |
          uv run ansible-playbook \
            --connection=local \
            --extra-vars target=localhost \
            --extra-vars @metrics-values.yml \
              atmosphere.common.flux \
              atmosphere.common.metrics_server
      - name: Wait for metrics-server HelmRelease to be ready
        run: |
          echo "Waiting for HelmRelease/metrics-server to be ready..."
          for i in {1..30}; do
            status=$(kubectl get helmrelease metrics-server -n kube-system -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' 2>/dev/null || echo "")
            if [ "$status" == "True" ]; then
              echo "HelmRelease is ready."
              break
            fi
            echo "Still waiting... ($i/30)"
            sleep 10
          done
          if [ "$status" != "True" ]; then
            echo "HelmRelease did not become ready in time."
            kubectl get helmrelease metrics-server -n kube-system -o yaml
            exit 1
          fi
      - name: Wait for Metrics Server to be ready
        run: |
          kubectl rollout status deployment/metrics-server -n kube-system --timeout=90s
      - name: Verify metrics-server with kubectl top
        run: |
          echo "Waiting for metrics-server to generate metrics..."
          sleep 30
          echo "Checking kubectl top nodes:"
          kubectl top nodes
          echo "Checking kubectl top pods:"
          kubectl top pods --all-namespaces
