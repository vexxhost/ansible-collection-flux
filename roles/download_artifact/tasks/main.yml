# Copyright (c) 2025 VEXXHOST, Inc.
# SPDX-License-Identifier: Apache-2.0

- name: Starting download of file
  ansible.builtin.debug:
    msg: "{{ download_artifact_url }}"

- name: Ensure download directory exists
  ansible.builtin.file:
    path: "{{ download_artifact_work_directory }}"
    state: directory

- name: Download item
  ansible.builtin.get_url:
    url: "{{ download_artifact_url }}"
    dest: "{{ download_artifact_dest }}"
    owner: "{{ download_artifact_owner | default(omit) }}"
    mode: "{{ download_artifact_mode | default(omit) }}"
    checksum: "{{ download_artifact_checksum | default(omit) }}"
    validate_certs: "{{ download_artifact_validate_certs | default(omit) }}"
    force_basic_auth: "{{ download_artifact_force_basic_auth | default(omit) }}"
    url_username: "{{ download_artifact_url_username | default(omit) }}"
    url_password: "{{ download_artifact_url_password | default(omit) }}"
  register: download_artifact_result
  until: download_artifact_result is succeeded
  retries: 4
  # NOTE(fitbeard): This task will avoid logging it's parameters to not leak
  #                 environment passwords in the log.
  no_log: "{{ download_artifact_no_log | bool }}"
  notify: "{{ download_artifact_notify }}"
  environment:
    http_proxy: "{{ download_artifact_http_proxy }}"
    https_proxy: "{{ download_artifact_https_proxy }}"
    no_proxy: "{{ download_artifact_no_proxy }}"

- name: Extract archive
  when: download_artifact_unarchive and not ansible_check_mode
  become: "{{ download_artifact_unarchive_become | default(omit) }}"
  ansible.builtin.unarchive:
    src: "{{ download_artifact_dest }}"
    dest: "{{ download_artifact_unarchive_dest }}"
    owner: "{{ download_artifact_owner | default(omit) }}"
    mode: "{{ download_artifact_mode | default(omit) }}"
    remote_src: true
    include: "{{ download_artifact_unarchive_include | default(omit) }}"
    extra_opts: "{{ download_artifact_unarchive_extra_opts | default(omit) }}"
  notify: "{{ download_artifact_notify }}"
